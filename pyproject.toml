[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mlogo"
version = "0.1.0"
description = "An ML approach to generating logos from text"
readme = "README.md"
authors = ["Vasilis Sioros <billsioros97@gmail.com>"]
license = "MIT"
homepage = "https://billsioros.github.io/mlogo"
repository = "https://github.com/billsioros/mlogo"
keywords = []
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/billsioros/mlogo/issues"
"Changelog" = "https://github.com/billsioros/mlogo/releases"

[tool.poetry.dependencies]
python = "^3.8"
Flask = "^2.1.2"
gunicorn = "^20.1.0"
flask-restx = "^0.5.1"
torch = "1.9.0"
torchvision = "0.10.0"
click = "^8.1.3"
pandas = "^1.4.2"
matplotlib = "^3.5.2"
numpy = "^1.22.4"
tqdm = "^4.64.0"
Pillow = "^9.2.0"
transformers = "^4.21.1"
plotly = "^5.10.0"

[tool.poetry.extras]
cuda = ["torch==1.9.0+cu102", "torchvision==0.10.0+cu102"]

[tool.poetry.dev-dependencies]
img2dataset = "^1.31.0"
ipykernel = "^6.15.0"
flake8 = "3.9.2"
nitpick = "^0.32.0"
wemake-python-styleguide = "^0.16.1"
python-semantic-release = "^7.15.3"
isort = "^5.9.3"
mypy = "^0.961"
black = "22.3.0"
pre-commit = "^2.19.0"
poethepoet = "^0.13.0"
coverage = {extras = ["toml"], version = "^5.5"}
pytest = "7.1.2"
pytest-cov = "^2.12.1"
pytest-sugar = "^0.9.4"
pytest-clarity = "^1.0.1"
mkdocs = "^1.3.0"
mkdocs-material = "^8.2.16"
mkdocs-minify-plugin = "^0.5.0"
mkdocs-redirects = "^1.0.4"
mkdocstrings = {extras = ["python"], version = "^0.19.0"}
mdx-truly-sane-lists = "^1.2"
mike = "^1.1.2"
bandit = "^1.7.4"
nbqa = "^1.3.1"
pip = "22.1.2"
setuptools = "62.3.2"
mknotebooks = "^0.7.1"
pydocstyle = {extras = ["toml"], version = "^6.1.1"}

[tool.poetry.scripts]
mlogo = "mlogo.__main__:cli"

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
changelog_components = "semantic_release.changelog.changelog_headers,semantic_release.changelog.compare_url"
build_command = "python -m pip install poetry && poetry build"
upload_to_pypi = false

[tool.vulture]
min_confidence = 95
paths = ["src", "tests"]

[tool.poe.tasks]

  [tool.poe.tasks.clean]
    help = "Clean up any auxiliary files"
    cmd = "rm -rf ./**/__pycache__ dist site .pytest_cache .mypy_cache .coverage"

  [tool.poe.tasks.format]
    help = "Format your codebase"
    shell = "poetry run isort .; poetry run black ."

  [tool.poe.tasks.hooks]
    help = "Run all pre-commit hooks"
    cmd = "poetry run pre-commit run --all-files --color always"

  [tool.poe.tasks.test]
    help = "Run the test suite and produce a coverage report"
    cmd = "poetry run pytest --cov=mlogo"

  [tool.poe.tasks.type]
    help = "Run static type checking on your codebase"
    cmd = "poetry run mypy"

  [tool.poe.tasks.lint]
    help = "Lint your code for errors"
    cmd = "poetry run flake8 ."

  [tool.poe.tasks.security]
    help = "Run security checks on your application"
    cmd = "poetry run bandit -r ."

  [tool.poe.tasks.docs]
    help = "Build and serve the documentation"

    [[tool.poe.tasks.docs.sequence]]
      ref = "_open --port 8080"

    [[tool.poe.tasks.docs.sequence]]
      cmd = "poetry run mkdocs serve -a http://localhost:8080 --livereload --watch-theme "

  [tool.poe.tasks.export]
    help = "Export dependencies to requirements.txt format"
    cmd = "poetry export --without-hashes --dev -o requirements.txt"

  [tool.poe.tasks.serve]
    help = "Serve the application in DEBUG mode"
    env = { FLASK_APP = "src/app/app.py", FLASK_DEBUG = "1", FLASK_ENV = "development" }

    [[tool.poe.tasks.serve.sequence]]
      ref = "_open --port 8080"

    [[tool.poe.tasks.serve.sequence]]
      cmd = "poetry run flask run --port 8080"

  [tool.poe.tasks.docker-build-api]
    help = "Build the API docker image"
    shell = "docker build . -t mlogo:$( git tag -l | tail -1 | cut -c2- ) -t build:api -f ./docker/Dockerfile"

  [tool.poe.tasks.docker-build-train]
    help = "Build the model training docker image"
    shell = "docker build . -t mlogo:$( git tag -l | tail -1 | cut -c2- ) -t build:train -f ./docker/Dockerfile.train"

  [tool.poe.tasks.docker-train]
    help = "Train the model using Docker"
    shell = "docker run -v $(pwd)/data:/home/app/app/data -v $(pwd)/model:/home/app/app/model --gpus $(nvidia-smi --list-gpus | wc -l) mlogo:$( git tag -l | tail -1 | cut -c2- )"

  [tool.poe.tasks.docker-run]
    help = "Run the docker image as a container"

    [[tool.poe.tasks.docker-run.sequence]]
      ref = "_open --port 8080"

    [[tool.poe.tasks.docker-run.sequence]]
      shell = "docker run -p 8080:8080 mlogo:$( git tag -l | tail -1 | cut -c2- )"

  [tool.poe.tasks._open]
    help = "Open a URL"
    cmd = "python -c 'import webbrowser; webbrowser.open(\"${host}:${port}\")'"

    [[tool.poe.tasks._open.args]]
      name = "host"
      options = ["-h", "--host"]
      help = "The host on which to expose the service (default: http://localhost)"
      default = "http://localhost"

    [[tool.poe.tasks._open.args]]
      name = "port"
      options = ["-p", "--port"]
      help = "The port on which to expose the service"
      default = "8000"

[tool.pytest.ini_options]
addopts = "-vv --color=yes"
log_cli = false
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s %(levelname)s %(message)s"
log_cli_level = "INFO"
python_files = "test_*.py"
python_functions = "test_*"
testpaths = "tests"
pythonpath = "src"

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
branch = true
source = ["mlogo"]

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = ["if self.debug:", "pragma: no cover", "raise NotImplementedError", "if __name__ == .__main__.:"]
ignore_errors = true
omit = ["tests/*"]

[tool.isort]
profile = "black"
src_paths = ["src/**/*", "tests"]
line_length = 99
known_first_party = "mlogo"

[tool.black]
line-length = 99
target-version = ["py37", "py38"]
skip-string-normalization = true

[tool.mypy]
files = ["src/**/*"]
warn_unused_configs = true
warn_return_any = true
ignore_missing_imports = true
pretty = true
color_output = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true

[tool.pydocstyle]
convention = "google"
